const tf = require('@tensorflow/tfjs-node');
const InputError = require('../exceptions/InputError');
 
async function predictClassification(model, image) {
    try {
        const tensor = tf.node
            .decodeJpeg(image)
            .resizeNearestNeighbor([100, 100])
            .expandDims()
            .toFloat()

 
        const classes = ['Apple',
                        'Apricot',
                        'Banana',
                        'Beans',
                        'Beetroot',
                        'Bell Pepper',
                        'Bitter Gourd',
                        'Black Berry',
                        'Black Current',
                        'Blueberry',
                        'Bottle Gourd',
                        'Broccoli',
                        'Cabbage',
                        'Carrot',
                        'Cauliflower',
                        'Chilli',
                        'Corn',
                        'Cranberry',
                        'Cucumber',
                        'Custard Apple',
                        'Dates',
                        'Dragon Fruit',
                        'Fig',
                        'Garlic',
                        'Ginger',
                        'Grapes',
                        'Guava',
                        'Jackfruit',
                        'Kiwi',
                        'Lemon',
                        'Litchi',
                        'Mango',
                        'Okra',
                        'Orange',
                        'Passion Fruit',
                        'Peach',
                        'Pear',
                        'Plum',
                        'Raspberry',
                        'Spinach',
                        'Strawberry',
                        'Tomato'];
 
        const prediction = model.predict(tensor);
        const score = await prediction.data();
        const confidenceScore = Math.max(...score) * 100;
 
        const classResult = tf.argMax(prediction, 1).dataSync()[0];
        const label = classes[classResult];
 
        return { confidenceScore, label};
    } catch (error) {
        throw new InputError(`Terjadi kesalahan input: ${error.message}`)
    }
}
 
module.exports = predictClassification;
